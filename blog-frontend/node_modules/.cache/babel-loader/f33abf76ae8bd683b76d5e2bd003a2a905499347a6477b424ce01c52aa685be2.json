{"ast":null,"code":"import api from \"../api/axiosConfig\";\n\n// Blogs\nexport const fetchBlogs = params => api.get(\"/blogs\", {\n  params\n}).then(r => r.data.data);\nexport const fetchBlog = id => api.get(`/blogs/${id}`).then(r => r.data.data);\nexport const createBlog = async ({\n  title,\n  content,\n  tags,\n  imageFile\n}) => {\n  let images = [];\n  if (imageFile) {\n    const form = new FormData();\n    form.append(\"file\", imageFile);\n    const upload = await api.post(\"/upload\", form, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    images.push({\n      url: upload.data.url,\n      public_id: upload.data.public_id\n    });\n  }\n  const {\n    data\n  } = await api.post(\"/blogs\", {\n    title,\n    content,\n    tags,\n    images\n  });\n  return data;\n};\nexport const updateBlog = async (id, {\n  title,\n  content,\n  tags,\n  imageFile,\n  replaceImages = false\n}) => {\n  let images;\n  if (imageFile) {\n    const form = new FormData();\n    form.append(\"file\", imageFile);\n    const upload = await api.post(\"/upload\", form, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    images = [{\n      url: upload.data.url,\n      public_id: upload.data.public_id\n    }];\n  }\n  const {\n    data\n  } = await api.put(`/blogs/${id}`, {\n    title,\n    content,\n    tags,\n    images,\n    replaceImages: replaceImages.toString()\n  });\n  return data;\n};\nexport const deleteBlog = id => api.delete(`/blogs/${id}`).then(r => r.data);\n\n// -------------------- Mock support for user blogs --------------------\nexport const fetchUserBlogs = userId => api.get(\"/blogs\").then(r => r.data.data.filter(b => b.author._id === userId));","map":{"version":3,"names":["api","fetchBlogs","params","get","then","r","data","fetchBlog","id","createBlog","title","content","tags","imageFile","images","form","FormData","append","upload","post","headers","push","url","public_id","updateBlog","replaceImages","put","toString","deleteBlog","delete","fetchUserBlogs","userId","filter","b","author","_id"],"sources":["C:/Users/user/OneDrive/Desktop/blogging platform/blogging platform/blog-frontend/src/services/blogService.js"],"sourcesContent":["import api from \"../api/axiosConfig\";\n\n// Blogs\nexport const fetchBlogs = (params) =>\n  api.get(\"/blogs\", { params }).then((r) => r.data.data);\n\nexport const fetchBlog = (id) =>\n  api.get(`/blogs/${id}`).then((r) => r.data.data);\n\nexport const createBlog = async ({ title, content, tags, imageFile }) => {\n  let images = [];\n  if (imageFile) {\n    const form = new FormData();\n    form.append(\"file\", imageFile);\n    const upload = await api.post(\"/upload\", form, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    });\n    images.push({ url: upload.data.url, public_id: upload.data.public_id });\n  }\n\n  const { data } = await api.post(\"/blogs\", { title, content, tags, images });\n  return data;\n};\n\nexport const updateBlog = async (id, { title, content, tags, imageFile, replaceImages = false }) => {\n  let images;\n  if (imageFile) {\n    const form = new FormData();\n    form.append(\"file\", imageFile);\n    const upload = await api.post(\"/upload\", form, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    });\n    images = [{ url: upload.data.url, public_id: upload.data.public_id }];\n  }\n\n  const { data } = await api.put(`/blogs/${id}`, { title, content, tags, images, replaceImages: replaceImages.toString() });\n  return data;\n};\n\nexport const deleteBlog = (id) => api.delete(`/blogs/${id}`).then((r) => r.data);\n\n// -------------------- Mock support for user blogs --------------------\nexport const fetchUserBlogs = (userId) =>\n  api.get(\"/blogs\").then((r) => r.data.data.filter((b) => b.author._id === userId));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}