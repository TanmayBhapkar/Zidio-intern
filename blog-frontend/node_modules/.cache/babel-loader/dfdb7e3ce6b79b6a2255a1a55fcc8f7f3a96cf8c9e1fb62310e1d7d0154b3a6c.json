{"ast":null,"code":"// src/api/axiosConfig.js\nimport axios from \"axios\";\n\n/**\n * ✅ Axios instance for API requests\n * - Uses REACT_APP_API_URL from environment variables or defaults to localhost\n * - Automatically attaches Bearer token from localStorage\n * - Provides global error handling\n */\n\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create Axios instance\nconst axiosInstance = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n/**\n * Request interceptor\n * - Adds Authorization header if user token exists in localStorage\n */\naxiosInstance.interceptors.request.use(config => {\n  try {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (user !== null && user !== void 0 && user.token) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n  } catch (err) {\n    console.warn(\"Could not parse user token from localStorage:\", err);\n  }\n  return config;\n}, error => Promise.reject(error));\n\n/**\n * Response interceptor\n * - Handles global API errors\n * - Can be extended for token refresh in future\n */\naxiosInstance.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // Server responded with a status other than 2xx\n    console.error(\"API Error:\", error.response.status, error.response.data);\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error(\"Network Error: Could not connect to server\", error.request);\n  } else {\n    // Something else triggered the error\n    console.error(\"Error:\", error.message);\n  }\n\n  // Optional: handle 401 Unauthorized globally\n  // if (error.response?.status === 401) {\n  //   // e.g., redirect to login or refresh token\n  // }\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","axiosInstance","create","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","err","console","warn","error","Promise","reject","response","status","data","message"],"sources":["C:/Users/user/OneDrive/Desktop/blogging platform/blogging platform/blog-frontend/src/api/axiosConfig.js"],"sourcesContent":["// src/api/axiosConfig.js\nimport axios from \"axios\";\n\n/**\n * ✅ Axios instance for API requests\n * - Uses REACT_APP_API_URL from environment variables or defaults to localhost\n * - Automatically attaches Bearer token from localStorage\n * - Provides global error handling\n */\n\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create Axios instance\nconst axiosInstance = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n/**\n * Request interceptor\n * - Adds Authorization header if user token exists in localStorage\n */\naxiosInstance.interceptors.request.use(\n  (config) => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (user?.token) {\n        config.headers.Authorization = `Bearer ${user.token}`;\n      }\n    } catch (err) {\n      console.warn(\"Could not parse user token from localStorage:\", err);\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n/**\n * Response interceptor\n * - Handles global API errors\n * - Can be extended for token refresh in future\n */\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response) {\n      // Server responded with a status other than 2xx\n      console.error(\"API Error:\", error.response.status, error.response.data);\n    } else if (error.request) {\n      // Request was made but no response received\n      console.error(\"Network Error: Could not connect to server\", error.request);\n    } else {\n      // Something else triggered the error\n      console.error(\"Error:\", error.message);\n    }\n\n    // Optional: handle 401 Unauthorized globally\n    // if (error.response?.status === 401) {\n    //   // e.g., redirect to login or refresh token\n    // }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,aAAa,GAAGL,KAAK,CAACM,MAAM,CAAC;EACjCL,OAAO;EACPM,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAIJ,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEK,KAAK,EAAE;MACfN,MAAM,CAACJ,OAAO,CAACW,aAAa,GAAG,UAAUN,IAAI,CAACK,KAAK,EAAE;IACvD;EACF,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,IAAI,CAAC,+CAA+C,EAAEF,GAAG,CAAC;EACpE;EACA,OAAOR,MAAM;AACf,CAAC,EACAW,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjB,aAAa,CAACG,YAAY,CAACiB,QAAQ,CAACf,GAAG,CACpCe,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACAL,OAAO,CAACE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACG,QAAQ,CAACC,MAAM,EAAEJ,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;EACzE,CAAC,MAAM,IAAIL,KAAK,CAACb,OAAO,EAAE;IACxB;IACAW,OAAO,CAACE,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAACb,OAAO,CAAC;EAC5E,CAAC,MAAM;IACL;IACAW,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACM,OAAO,CAAC;EACxC;;EAEA;EACA;EACA;EACA;;EAEA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAejB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}