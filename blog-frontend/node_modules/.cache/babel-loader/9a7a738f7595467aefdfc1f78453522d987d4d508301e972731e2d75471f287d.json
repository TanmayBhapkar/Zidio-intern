{"ast":null,"code":"// src/api/axiosConfig.js\nimport axios from \"axios\";\n\n// ✅ Use environment variable first, fallback to local backend\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\nconst axiosInstance = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Attach token automatically for every request\naxiosInstance.interceptors.request.use(config => {\n  try {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (user && user.token) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n  } catch (err) {\n    console.warn(\"Could not parse user token:\", err);\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ Global error handler for API responses\naxiosInstance.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    console.error(\"API Error:\", error.response.data);\n  } else if (error.request) {\n    console.error(\"Network Error: Could not connect to server\");\n  } else {\n    console.error(\"Error:\", error.message);\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","axiosInstance","create","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","err","console","warn","error","Promise","reject","response","data","message"],"sources":["C:/Users/Manis/Desktop/blogging platform/blog-frontend/src/api/axiosConfig.js"],"sourcesContent":["// src/api/axiosConfig.js\nimport axios from \"axios\";\n\n// ✅ Use environment variable first, fallback to local backend\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\nconst axiosInstance = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// ✅ Attach token automatically for every request\naxiosInstance.interceptors.request.use(\n  (config) => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (user && user.token) {\n        config.headers.Authorization = `Bearer ${user.token}`;\n      }\n    } catch (err) {\n      console.warn(\"Could not parse user token:\", err);\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// ✅ Global error handler for API responses\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response) {\n      console.error(\"API Error:\", error.response.data);\n    } else if (error.request) {\n      console.error(\"Network Error: Could not connect to server\");\n    } else {\n      console.error(\"Error:\", error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,aAAa,GAAGL,KAAK,CAACM,MAAM,CAAC;EACjCL,OAAO;EACPM,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAK,EAAE;MACtBN,MAAM,CAACJ,OAAO,CAACW,aAAa,GAAG,UAAUN,IAAI,CAACK,KAAK,EAAE;IACvD;EACF,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,IAAI,CAAC,6BAA6B,EAAEF,GAAG,CAAC;EAClD;EACA,OAAOR,MAAM;AACf,CAAC,EACAW,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAjB,aAAa,CAACG,YAAY,CAACiB,QAAQ,CAACf,GAAG,CACpCe,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClBL,OAAO,CAACE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACG,QAAQ,CAACC,IAAI,CAAC;EAClD,CAAC,MAAM,IAAIJ,KAAK,CAACb,OAAO,EAAE;IACxBW,OAAO,CAACE,KAAK,CAAC,4CAA4C,CAAC;EAC7D,CAAC,MAAM;IACLF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACK,OAAO,CAAC;EACxC;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAejB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}